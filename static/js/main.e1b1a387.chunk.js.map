{"version":3,"sources":["component/Navigasi.js","component/Inputmodal.js","component/Konten.js","App.js","serviceWorker.js","index.js"],"names":["Navigasi","props","Navbar","bg","variant","Brand","href","Image","alt","src","width","height","className","roundedCircle","Nav","Link","active","Inputmodal","Modal","size","centered","show","modalShow","onHide","setModalShow","Header","Title","style","margin","Body","Form","Control","value","dataState","inputNama","onChange","e","handleInput","type","placeholder","inputJabatan","inputJK","inputTanggal","Footer","Button","onClick","closeModal","simpanData","Konten","state","dataKaryawan","cariApa","inputId","panggilData","bind","cari","clearInput","hapusData","this","fetch","then","response","json","hasil","setState","id","nama_karyawan","jabatan","jenis_kelamin","tanggal_lahir","target","alert","method","body","JSON","stringify","headers","result","Container","Row","Col","FormControl","filter","toLowerCase","includes","map","index","Card","marginLeft","marginTop","key","Img","borderRadius","padding","Text","Table","borderless","panggilById","Component","App","React","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e1b1a387.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Image, Nav, Navbar } from 'react-bootstrap';\r\n\r\nfunction Navigasi(props) {\r\n    return (\r\n        <Navbar bg=\"primary\" variant=\"dark\">\r\n            <Navbar.Brand href=\"#home\">\r\n                <Image\r\n                    alt=\"\"\r\n                    src=\"https://image.shutterstock.com/image-vector/transport-logo-template-260nw-351283481.jpg\"\r\n                    width=\"30\"\r\n                    height=\"30\"\r\n                    className=\"d-inline-block align-top\"\r\n                    roundedCircle\r\n                />{' '}\r\n                    Kusmara Trans\r\n            </Navbar.Brand>\r\n            <Nav className=\"mr-auto\">\r\n                <Nav.Link href=\"#\">Home</Nav.Link>\r\n                <Nav.Link href=\"#\">Armada</Nav.Link>\r\n                <Nav.Link href=\"#\" active>Karyawan</Nav.Link>\r\n            </Nav>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default Navigasi;","import React from 'react';\r\nimport { Modal, Form, Button } from 'react-bootstrap';\r\n\r\nfunction Inputmodal(props) {\r\n    return (\r\n        <>\r\n            <Modal size='md' centered show={props.modalShow} onHide={() => props.setModalShow(true)}>\r\n                <Modal.Header>\r\n                    <Modal.Title style={{ margin: 'auto' }}>Data Karyawan</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {/* <Form.Control className=\"mb-3\" value={props.dataState.inputId} onChange={(e) => props.handleInput('inputId', e)} type=\"text\" placeholder=\"ID Karyawan\" /> */}\r\n                    <Form.Control className=\"mb-3\" value={props.dataState.inputNama} onChange={(e) => props.handleInput('inputNama', e)} type=\"text\" placeholder=\"Nama Karyawan\" />\r\n                    <Form.Control className=\"mb-3\" value={props.dataState.inputJabatan} onChange={(e) => props.handleInput('inputJabatan', e)} type=\"text\" placeholder=\"Jabatan Karyawan\" />\r\n                    <Form.Control className=\"mb-3\" value={props.dataState.inputJK} onChange={(e) => props.handleInput('inputJK', e)} type=\"text\" placeholder=\"Jenis Kelamin Karyawan\" />\r\n                    <Form.Control className=\"mb-3\" value={props.dataState.inputTanggal} onChange={(e) => props.handleInput('inputTanggal', e)} type=\"date\" placeholder=\"Tanggal Lahir Karyawan\" />\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={() => props.closeModal()}>Close</Button>\r\n                    <Button variant=\"primary\" onClick={() => props.simpanData()} >Simpan</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Inputmodal;","import React, { Component } from 'react';\r\nimport { Button, Card, Col, Container, FormControl, Row, Table } from 'react-bootstrap';\r\nimport Inputmodal from './Inputmodal';\r\n\r\nclass Konten extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dataKaryawan: [],\r\n            cariApa: '',\r\n            inputId: '',\r\n            inputNama: '',\r\n            inputJabatan: '',\r\n            inputJK: '',\r\n            inputTanggal: ''\r\n        }\r\n        this.panggilData = this.panggilData.bind(this)\r\n        this.cari = this.cari.bind(this)\r\n        this.handleInput = this.handleInput.bind(this)\r\n        this.clearInput = this.clearInput.bind(this)\r\n        this.simpanData = this.simpanData.bind(this)\r\n        this.hapusData = this.hapusData.bind(this)\r\n        this.closeModal = this.closeModal.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.panggilData()\r\n    }\r\n\r\n    // Ambil semua data di json server\r\n    panggilData() {\r\n        fetch('http://localhost:3000/data-karyawan')\r\n            .then((response) => response.json())\r\n            .then((hasil) => this.setState({ dataKaryawan: hasil }))\r\n    }\r\n\r\n    // Ambil Data Berdasarkan ID\r\n    panggilById(id) {\r\n        fetch(`http://localhost:3000/data-karyawan/${id}`)\r\n            .then((response) => response.json())\r\n            .then((hasil) => {\r\n                this.props.setModalShow(true)\r\n                this.setState({\r\n                    inputId: hasil.id,\r\n                    inputNama: hasil.nama_karyawan,\r\n                    inputJabatan: hasil.jabatan,\r\n                    inputJK: hasil.jenis_kelamin,\r\n                    inputTanggal: hasil.tanggal_lahir\r\n                })\r\n            })\r\n    }\r\n\r\n    // Mencari Data di JSON Server\r\n    cari(e) {\r\n        this.setState({ cariApa: e.target.value })\r\n    }\r\n\r\n    // Ambil Nilai Input\r\n    handleInput(value, e) {\r\n        this.setState({ [value]: e.target.value })\r\n    }\r\n\r\n    // Hapus Inputan\r\n    clearInput() {\r\n        this.setState(\r\n            {\r\n                inputId: '',\r\n                inputNama: '',\r\n                inputJabatan: '',\r\n                inputJK: '',\r\n                inputTanggal: ''\r\n            }\r\n        )\r\n    }\r\n\r\n    // Menyimpan data ke JSON Server\r\n    simpanData() {\r\n        if (this.state.inputNama === \"\" || this.state.inputJabatan === \"\" || this.state.inputJK === \"\" || this.state.inputTanggal === \"\") {\r\n            alert(\"Silahkan Isi Data Terlebih Dahulu\")\r\n        } else if (this.state.inputId === \"\") {\r\n            fetch('http://localhost:3000/data-karyawan', {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    // id: this.state.inputId,\r\n                    nama_karyawan: this.state.inputNama,\r\n                    jabatan: this.state.inputJabatan,\r\n                    jenis_kelamin: this.state.inputJK,\r\n                    tanggal_lahir: this.state.inputTanggal\r\n                }),\r\n                headers: {\r\n                    'Content-type': 'application/json; charset=UTF-8',\r\n                },\r\n            })\r\n                .then((response) => response.json())\r\n                .then((result => {\r\n                    this.closeModal()\r\n                    this.panggilData()\r\n                }))\r\n        } else {\r\n            fetch(`http://localhost:3000/data-karyawan/${this.state.inputId}`, {\r\n                method: 'PUT',\r\n                body: JSON.stringify({\r\n                    // id: this.state.inputId,\r\n                    nama_karyawan: this.state.inputNama,\r\n                    jabatan: this.state.inputJabatan,\r\n                    jenis_kelamin: this.state.inputJK,\r\n                    tanggal_lahir: this.state.inputTanggal\r\n                }),\r\n                headers: {\r\n                    'Content-type': 'application/json; charset=UTF-8'\r\n                },\r\n            })\r\n                .then((response) => response.json())\r\n                .then((hasil) => {\r\n                    this.panggilData()\r\n                    this.props.setModalShow(false)\r\n                    this.clearInput()\r\n                })\r\n        }\r\n    }\r\n\r\n    hapusData(id) {\r\n        fetch(`http://localhost:3000/data-karyawan/${id}`, { method: 'DELETE' }).then((response => { alert('Data Berhasil Dihapus'); this.panggilData() }))\r\n    }\r\n\r\n    closeModal() {\r\n        this.props.setModalShow(false);\r\n        this.clearInput()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container className=\"mt-3\" >\r\n                <Inputmodal modalShow={this.props.modalShow} setModalShow={this.props.setModalShow} closeModal={this.closeModal} handleInput={this.handleInput} dataState={this.state} simpanData={this.simpanData} />\r\n                <Row>\r\n                    <Col>\r\n                        <FormControl type=\"text\" placeholder=\"Cari Data Karyawan\" className=\"mr-sm-2\" value={this.state.cariApa} onChange={(e) => this.cari(e)} />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mt-3\">\r\n                    <Col>\r\n                        <Button variant=\"success\" onClick={() => this.props.setModalShow(true)}>Tambah Data Karyawan</Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mt-3\">\r\n                    {/* <Table hover bordered variant=\"dark\">\r\n                                    <thead className=\"text-center\">\r\n                                        <tr>\r\n                                            <th>NAMA KARYAWAN</th>\r\n                                            <th>JABATAN</th>\r\n                                            <th>JENIS KELAMIN</th>\r\n                                            <th>TANGGAL LAHIR</th>\r\n                                            <th>AKSI</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        <tr key={index}>\r\n                                            <td>{value.nama_karyawan}</td>\r\n                                            <td>{value.jabatan}</td>\r\n                                            <td>{value.jenis_kelamin}</td>\r\n                                            <td>{value.tanggal_lahir}</td>\r\n                                            <td className=\"text-center\">\r\n                                                <Button variant=\"warning\" onClick={() => this.panggilById(value.id)}>Edit</Button>&nbsp;\r\n                                                <Button variant=\"danger\" onClick={() => this.hapusData(value.id)}>Hapus</Button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </Table> */}\r\n                    {\r\n                        this.state.dataKaryawan.filter(filter => filter.nama_karyawan.toLowerCase().includes(this.state.cariApa.toLowerCase())).map((value, index) => {\r\n                            return (\r\n                                // Tampilkan Melalui Card\r\n                                < Card style={{ width: '350px', marginLeft: '20px', marginTop: '20px' }} key={index}>\r\n                                    <Card.Img variant=\"top\" src=\"https://p7.hiclipart.com/preview/247/564/869/computer-icons-user-profile-clip-art-user-avatar.jpg\" style={{ borderRadius: '70%', width: '150px', margin: 'auto', padding: '10px' }} />\r\n                                    <Card.Body>\r\n                                        <Card.Text>\r\n                                            <Table borderless>\r\n                                                <tbody>\r\n                                                    <tr>\r\n                                                        <td>Nama</td>\r\n                                                        <td>:</td>\r\n                                                        <td>{value.nama_karyawan}</td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>Jabatan</td>\r\n                                                        <td>:</td>\r\n                                                        <td>{value.jabatan}</td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>Jenis Kelamin</td>\r\n                                                        <td>:</td>\r\n                                                        <td>{value.jenis_kelamin}</td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>Tanggal Lahir</td>\r\n                                                        <td>:</td>\r\n                                                        <td>{value.tanggal_lahir}</td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            </Table>\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                    <Card.Footer className=\"text-center\">\r\n                                        <Button variant=\"warning\" onClick={() => this.panggilById(value.id)}>Edit</Button>&nbsp;\r\n                                                <Button variant=\"danger\" onClick={() => this.hapusData(value.id)}>Hapus</Button>\r\n                                    </Card.Footer>\r\n                                </ Card>\r\n                            )\r\n                        })\r\n                    }\r\n                </Row>\r\n            </Container >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Konten;","import React from 'react';\nimport './css/bootstrap.min.css';\nimport Navigasi from './component/Navigasi';\nimport Konten from './component/Konten'\n\nfunction App() {\n  const [modalShow, setModalShow] = React.useState(false)\n  return (\n    <>\n      <Navigasi />\n      <Konten modalShow={modalShow} setModalShow={setModalShow} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}